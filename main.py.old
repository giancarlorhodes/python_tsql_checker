
import tkinter as tk
from tkinter import filedialog, messagebox
import json


class JsonEditorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("JSON Editor")
        self.root.geometry("900x600")

        # Menu bar
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Open", command=self.open_file)
        file_menu.add_command(label="Save", command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)

        # Split top and bottom using PanedWindow (Vertical)
        self.vertical_pane = tk.PanedWindow(self.root, orient=tk.VERTICAL)
        self.vertical_pane.pack(fill=tk.BOTH, expand=1)

        # Split the top into two halves (Horizontal)
        self.top_pane = tk.PanedWindow(self.vertical_pane, orient=tk.HORIZONTAL)
        
        # Top left: View Names
        self.names_frame = tk.Frame(self.top_pane)
        self.names_label = tk.Label(self.names_frame, text="View Names")
        self.names_label.pack()
        self.names_text = tk.Text(self.names_frame, wrap="word", font=("Arial", 12))
        self.names_text.pack(fill=tk.BOTH, expand=True)
        self.top_pane.add(self.names_frame)

        # Top right: View Samples
        self.samples_frame = tk.Frame(self.top_pane)
        self.samples_label = tk.Label(self.samples_frame, text="View Samples")
        self.samples_label.pack()
        self.samples_text = tk.Text(self.samples_frame, wrap="word", font=("Arial", 12))
        self.samples_text.pack(fill=tk.BOTH, expand=True)
        self.top_pane.add(self.samples_frame)

        # Add top pane (View Names and View Samples) to the top half
        self.vertical_pane.add(self.top_pane, height=300)  # Fixed height for top half

        # Bottom: Raw Editor/Viewer
        self.raw_frame = tk.Frame(self.vertical_pane)
        self.raw_label = tk.Label(self.raw_frame, text="Raw Editor/Viewer")
        self.raw_label.pack()
        self.raw_text = tk.Text(self.raw_frame, wrap="word", font=("Arial", 12))
        self.raw_text.pack(fill=tk.BOTH, expand=True)
        self.vertical_pane.add(self.raw_frame)

        # Status bar
        self.status_label = tk.Label(self.root, text="Welcome to the JSON Editor", anchor="w")
        self.status_label.pack(side="bottom", fill="x")

        # Initialize file path
        self.file_path = None

    def open_file(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("JSON Files", "*.json")])
        if self.file_path:
            try:
                with open(self.file_path, "r") as file:
                    data = json.load(file)
                self.raw_text.delete(1.0, tk.END)
                self.raw_text.insert(tk.END, json.dumps(data, indent=4))
                self.populate_view_names(data)
                self.populate_view_samples(data)
                self.status_label.config(text=f"Opened: {self.file_path}")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to open file: {e}")

    def save_file(self):
        if not self.file_path:
            self.file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON Files", "*.json")])
        if self.file_path:
            try:
                json_data = self.raw_text.get(1.0, tk.END).strip()
                with open(self.file_path, "w") as file:
                    json.dump(json.loads(json_data), file, indent=4)
                self.status_label.config(text=f"Saved: {self.file_path}")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to save file: {e}")

    def populate_view_names(self, data):
        self.names_text.delete(1.0, tk.END)
        if isinstance(data, dict):
            for key in data.keys():
                self.names_text.insert(tk.END, key + "\n")
        elif isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
            for item in data:
                self.names_text.insert(tk.END, list(item.keys())[0] + "\n")

    def populate_view_samples(self, data):
        self.samples_text.delete(1.0, tk.END)
        if isinstance(data, dict):
            for key, value in data.items():
                self.samples_text.insert(tk.END, json.dumps(value, indent=4) + "\n")
        elif isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
            for item in data:
                self.samples_text.insert(tk.END, json.dumps(list(item.values())[0], indent=4) + "\n")


if __name__ == "__main__":
    root = tk.Tk()
    app = JsonEditorApp(root)
    root.mainloop()






# v 2
# import tkinter as tk
# from tkinter import filedialog, messagebox
# import json


# class JsonEditorApp:
#     def __init__(self, root):
#         self.root = root
#         self.root.title("JSON Editor")
#         self.root.geometry("900x600")

#         # Menu bar
#         menubar = tk.Menu(self.root)
#         self.root.config(menu=menubar)

#         file_menu = tk.Menu(menubar, tearoff=0)
#         menubar.add_cascade(label="File", menu=file_menu)
#         file_menu.add_command(label="Open", command=self.open_file)
#         file_menu.add_command(label="Save", command=self.save_file)
#         file_menu.add_separator()
#         file_menu.add_command(label="Exit", command=self.root.quit)

#         # Create three frames to organize text widgets
#         self.main_frame = tk.PanedWindow(self.root, orient=tk.HORIZONTAL)
#         self.main_frame.pack(fill=tk.BOTH, expand=1)

#         # Raw Editor/Viewer text widget
#         self.raw_frame = tk.Frame(self.main_frame)
#         self.raw_label = tk.Label(self.raw_frame, text="Raw Editor/Viewer")
#         self.raw_label.pack()
#         self.raw_text = tk.Text(self.raw_frame, wrap="word", font=("Arial", 12))
#         self.raw_text.pack(fill=tk.BOTH, expand=True)
#         self.main_frame.add(self.raw_frame)

#         # View Names text widget
#         self.names_frame = tk.Frame(self.main_frame)
#         self.names_label = tk.Label(self.names_frame, text="View Names")
#         self.names_label.pack()
#         self.names_text = tk.Text(self.names_frame, wrap="word", font=("Arial", 12))
#         self.names_text.pack(fill=tk.BOTH, expand=True)
#         self.main_frame.add(self.names_frame)

#         # View Samples text widget
#         self.samples_frame = tk.Frame(self.main_frame)
#         self.samples_label = tk.Label(self.samples_frame, text="View Samples")
#         self.samples_label.pack()
#         self.samples_text = tk.Text(self.samples_frame, wrap="word", font=("Arial", 12))
#         self.samples_text.pack(fill=tk.BOTH, expand=True)
#         self.main_frame.add(self.samples_frame)

#         # Status bar
#         self.status_label = tk.Label(self.root, text="Welcome to the JSON Editor", anchor="w")
#         self.status_label.pack(side="bottom", fill="x")

#         # Initialize file path
#         self.file_path = None

#     def open_file(self):
#         self.file_path = filedialog.askopenfilename(filetypes=[("JSON Files", "*.json")])
#         if self.file_path:
#             try:
#                 with open(self.file_path, "r") as file:
#                     data = json.load(file)
#                 self.raw_text.delete(1.0, tk.END)
#                 self.raw_text.insert(tk.END, json.dumps(data, indent=4))
#                 self.populate_view_names(data)
#                 self.populate_view_samples(data)
#                 self.status_label.config(text=f"Opened: {self.file_path}")
#             except Exception as e:
#                 messagebox.showerror("Error", f"Failed to open file: {e}")

#     def save_file(self):
#         if not self.file_path:
#             self.file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON Files", "*.json")])
#         if self.file_path:
#             try:
#                 json_data = self.raw_text.get(1.0, tk.END).strip()
#                 with open(self.file_path, "w") as file:
#                     json.dump(json.loads(json_data), file, indent=4)
#                 self.status_label.config(text=f"Saved: {self.file_path}")
#             except Exception as e:
#                 messagebox.showerror("Error", f"Failed to save file: {e}")

#     def populate_view_names(self, data):
#         self.names_text.delete(1.0, tk.END)
#         if isinstance(data, dict):
#             for key in data.keys():
#                 self.names_text.insert(tk.END, key + "\n")
#         elif isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
#             for item in data:
#                 self.names_text.insert(tk.END, list(item.keys())[0] + "\n")

#     def populate_view_samples(self, data):
#         self.samples_text.delete(1.0, tk.END)
#         if isinstance(data, dict):
#             for key, value in data.items():
#                 self.samples_text.insert(tk.END, json.dumps(value, indent=4) + "\n")
#         elif isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
#             for item in data:
#                 self.samples_text.insert(tk.END, json.dumps(list(item.values())[0], indent=4) + "\n")


# if __name__ == "__main__":
#     root = tk.Tk()
#     app = JsonEditorApp(root)
#     root.mainloop()




# v 1
# import tkinter as tk
# from tkinter import filedialog, messagebox
# import json


# class JsonEditorApp:
#     def __init__(self, root):
#         self.root = root
#         self.root.title("JSON Editor")
#         self.root.geometry("600x400")

#         # Menu bar
#         menubar = tk.Menu(self.root)
#         self.root.config(menu=menubar)

#         file_menu = tk.Menu(menubar, tearoff=0)
#         menubar.add_cascade(label="File", menu=file_menu)
#         file_menu.add_command(label="Open", command=self.open_file)
#         file_menu.add_command(label="Save", command=self.save_file)
#         file_menu.add_separator()
#         file_menu.add_command(label="Exit", command=self.root.quit)

#         # Text area for JSON data
#         self.text_area = tk.Text(self.root, wrap="word", font=("Arial", 12))
#         self.text_area.pack(fill="both", expand=True)

#         # Status bar
#         self.status_label = tk.Label(self.root, text="Welcome to the JSON Editor", anchor="w")
#         self.status_label.pack(side="bottom", fill="x")

#         # Initialize file path
#         self.file_path = None

#     def open_file(self):
#         self.file_path = filedialog.askopenfilename(filetypes=[("JSON Files", "*.json")])
#         if self.file_path:
#             try:
#                 with open(self.file_path, "r") as file:
#                     data = json.load(file)
#                 self.text_area.delete(1.0, tk.END)
#                 self.text_area.insert(tk.END, json.dumps(data, indent=4))
#                 self.status_label.config(text=f"Opened: {self.file_path}")
#             except Exception as e:
#                 messagebox.showerror("Error", f"Failed to open file: {e}")

#     def save_file(self):
#         if not self.file_path:
#             self.file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON Files", "*.json")])
#         if self.file_path:
#             try:
#                 json_data = self.text_area.get(1.0, tk.END).strip()
#                 with open(self.file_path, "w") as file:
#                     json.dump(json.loads(json_data), file, indent=4)
#                 self.status_label.config(text=f"Saved: {self.file_path}")
#             except Exception as e:
#                 messagebox.showerror("Error", f"Failed to save file: {e}")

# if __name__ == "__main__":
#     root = tk.Tk()
#     app = JsonEditorApp(root)
#     root.mainloop()
